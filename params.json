{"name":"Naga-framework","tagline":"","body":"#Naga Framework\r\n\r\nCurrent version: 2.1b\r\n\r\n## Table of Contents\r\n\r\n1. [Requirements](#requirements)\r\n\r\n## Requirements\r\n\r\nIn order to use Naga, your environment has to meet these requirements:  \r\n```\r\nApache       2.2+  \r\n             with mod_rewrite enabled  \r\nPHP          5.4+  \r\n             with PDO and enabled extensions: mbstring, pgsql, mysql, sqlite \r\nMySQL        5.1+  \r\nPostgreSQL   9.1+  \r\n```\r\n\r\n## Installation\r\n\r\n- Create your project directory: ```mkdir project```  \r\n- Get a copy of Naga from git:  \r\n```\r\ngit clone https://username@bitbucket.org/BlindingLight/naga-core.git .  \r\ncd project\r\n```\r\n- If you don't have [composer](http://getcomposer.org) installed globally, download it:    \r\n```\r\ncurl -sS https://getcomposer.org/installer | php\r\nTo install it globally:\r\nmv composer.phar /usr/local/bin/composer\r\n```\r\n- Run composer install to download dependencies: ```composer install```  \r\nThis will download [Twig](http://twig.sensiolabs.org), [SwiftMailer](http://swiftmailer.org) and Naga framework.\r\n- Create a virtual host entry in apache2 config and make it point to ```public```\r\n\r\nYou are ready to develop your first Naga project! :)\r\n\r\n## Configuration\r\n\r\nYou can find configuration files in ```app/config``` directory.  \r\nDefault files:  \r\n```\r\napplication.php             application config\r\ncacheconnections.php        cache connections config\r\ncli.php                     command line config\r\ndatabases.php               database config\r\nemail.php                   email config\r\nexternalclasses.php         external classes config for autoloader\r\nroutes.php                  app routes\r\ntwig.php                    Twig related configurations\r\nvalidation.php              validation rules\r\n```\r\n\r\nYou can create as many php or json files as you want, even in subdirectories. These configs will be accessible  \r\nlike ```App::config('filename')```. If a file is in a subdirectory, you can access it like ```App::config('directory.subdirectory.filename')```. You can access config properties directly like ```App::config('directory.subdirectory.filename.item.property.array.0.subProperty')```    \r\n\r\n## Bootstrap\r\n\r\nRun this code every time you change code in any of the php files in ```app/bootstrap``` directory:  \r\n```\r\nphp app/bootstrap.php update\r\n```\r\n\r\nWrite your custom code to ```custom.php```. This file will be included last.\r\n\r\n## Routing\r\n\r\nYou can define your routes in ```app/config/routes.php```.\r\n\r\nA self-explanatory example:  \r\n```php\r\nreturn array(\r\n\t// url with params, every parameter must follow this pattern: {paramName|regexp}\r\n\t'test/{id|[0-9]+}' => array(\r\n\t\t/*\r\n\t\t * you can generate links with this identifier via App::urlGenerator()->route('home', array('id' => 1))\r\n\t\t * or {{ 'test'|url('id:' ~ something.id) }} in twig templates\r\n\t\t * see UrlGenerator docs\r\n\t\t */\r\n\t\t'as' => 'test',\r\n\t\t/*\r\n\t\t * http methods: get, post, put, delete\r\n\t\t * these can either be a closure or name of a function\r\n\t\t * the function will be called with first argument containing route parameters\r\n\t\t * parsed from uri\r\n\t\t */\r\n\t\t'get' => '\\App\\Controller\\TestController@getTest',\r\n\t\t'post' => function($params) {\r\n\t\t\treturn 'These are our params: ' . implode(', ', $params);\r\n\t\t}\r\n\t)\r\n)\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}